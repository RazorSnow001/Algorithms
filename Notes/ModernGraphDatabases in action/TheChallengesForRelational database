Let’s briefly look at some of the challenges of representing multiple varying types
of relationships with relational databases

Relational databases (in a fit of naming
irony) are rather poor at representing rich relationships

The relationships in relational databases are foreign keys, which are pointers to primary keys in other tables.

These pointers are not things we can observe and manipulate easily. Instead, the foreign keys are followed (at query time) from one row to another row

As a final point, graph databases enhance developer productivity for certain problems in ways that other technologies cannot. Storing data in a manner that better represents its real-world counterpart can make it easier for developers to reason over and
understand the domain in which they are working. This allows new team members to
get up to speed more quickly on the domain. They learn the domain and its database
representation simultaneously.

As developers, we often choose a familiar tool over an optimal one

We are not trying to say that relational databases are a poor tool. In fact, it’s usually
the first one that we reach for when working on our own applications. But relational
databases have their limitations. While it is possible to use relational databases with
highly connected data, in many cases the work can be simplified by using a tool designed
for these types of use cases. In this section, we look at three areas where graph databases
provide a simpler, more elegant solution than using a relational database:

Recursive queries (for example, an organization’s employee reporting hierarchy, or org chart)
Different result types (for example, an orders and products reporting example)
Paths (for example, a river-crossing puzzle)

DIFFERENT RESULT TYPES
Have you ever needed to return several different data types from a database, all within
a single result set? While it is possible to achieve this with a union of all the columns in
all of the tables, it tends to yield less than ideal results. One of the strengths of a graph
database is the ability to return differing data types in the results. Let’s look at how
relational and graph databases compare when returning different types

the first method is to use the union of the table . but that is not good
the actual usage of that we need to
do the map
to encapsulate the order and the product
object which is related
so we need to search the order
and then
search the product
and then
to encapsulate
all of these things !

that is normal operation of the mysql

gremlin> g.V().valueMap(true)
==>[label:order, address:[123 Main St], name:[John Smith], id:1]
==>[label:order, address:[234 Park St], name:[Jane Right], id:2]
==>[label:product, cost:[10.76], id:234, product_name:[widget 2]]
==>[label:product, cost:[5.95], id:123, product_name:[widget 1]]

Compared to the earlier SQL results, the data returned from the graph retains the
semantic meaning of what the object is and what it represents, without the extraneous
null data. Because graph databases provide the flexibility to return disparate data, we
can create much cleaner code when working with highly varied data types.s

Let’s look at a classic puzzle known as the “river crossing puzzle” to illustrate how
paths can help solve problems in a novel fashion. In our river crossing puzzle, we have
a fox, a goose, and a bag of barley that must be transported across a river by a farmer
on a boat. However, this movement is bound by the following constraints:

Using a relational database, we can’t find a way to solve this riddle without using a
brute force method to calculate all possible combinations. However, with a little clever
data modeling and the power of a pathfinding algorithm, it’s rather straightforward to
answer this riddle with a graph