Id,Label,timeset
0,The electronic circuits of each computer can recognize and directly execute a limited set of simple instructions,
1,into which all its programs must be converted before they can be executed.,
2,Add two numbers.,
3,Check a number to see if it is zero.,
4,Copy a piece of data from one part of the computer’s memory to another.,
5,a computer’s primitive instructions form a language in which people can communicate with the computer,
6,machine language,
7,primitive instructions as simple as possible,
11,performance requirement,
10,a way of structuring computers,
12,complexity and cost of the electronics needed,
13,a sequence of abstractions,
14,translation,
15,interpreter,
16,"In interpretation, after each L1 instruction is examined and decoded, it is carried out immediately",
17,Programs in L0 can be directly executed by the electronic circuits,
18,"Programs in L1 are either interpreted by an interpreter running on M0, or are translated to L0",
19,"Programs in L2 are either interpreted by interpreters running on M1 or M0, or are translated to L1 or L0",
20,"Programs in Ln are either interpreted by an interpreter running on a lower machine, or are translated to the machine language of a lower machine",
21,"Only programs written in language L0 can be directly carried out by the electronic circuits, without the need for intervening translation or interpretation",
22,"Programs written in L1, L2, ... Ln must be either interpreted by an interpreter running on a lower level or translated to another language corresponding to a lower level.",
23,"Most programmers using an n-level machine are interested only in the top level, the one least resembling the machine language at the very bottom.",
24,people interested in understanding how a computer really works must study all the levels.,
25,People who design new computers or new levels must also be familiar with levels other than the top one.,
26,The concepts and techniques of constructing machines as a series of levels and the details of the levels themselves form the main subject of this book,
27,At the lowest level that we will study,
28,the interesting objects are called gates,
29,"Although built from analog components, such as transistors,",
30,gates can be accurately modeled as digital devices,
31,. Each gate has one or more digital inputs (signals representing 0 or 1) and computes as output some simple function of these inputs,
32,AND,
33,OR,
34,Each gate is built up of at most a handful of transistors.,
35,A small number of gates can be combined to form a 1-bit memory,
36,which can store a 0 or a 1,
37,"The 1-bit memories can be combined in groups of (for example) 16, 32, or 64 to form registers",
38,a single binary number up to some maximum,
42,e microarchitecture level,
40,Gates can also be combined to form the main computing engine itself,
43,At this level we see a collection of (typically) 8 to 32 registers,
44,a local memory,
45,a circuit called an ALU (Arithmetic Logic Unit),
46,capable of performing simple arithmetic operations,
47,The registers are connected to the ALU to form a data path,
48,over which the data flow,
49,"The basic operation of the data path consists of selecting one or two registers, having the ALU operate on them",
50,"adding them together), and storing the result back in some register",
51,"Processors, memories, and input/output are key concepts and will be present at every level,",
52,Its function is to execute programs stored in the main memory,
53,"by fetching their instructions, examining them, and then executing them one after another.",
54,The components are connected by a bus,
55,control signals,
56,data,
57,address,
58,"Buses can be external to the CPU, connecting it to memory and I/O devices",
59,but also internal to the CPU,
60,Modern computers have multiple buses.,
61,The CPU is composed of several distinct parts,
62,control unit,
63,fetching instructions from main memory and determining their type,
66,"The CPU also contains a small, high-speed memory used to store temporary results and certain control information",
65,The arithmetic logic unit performs operations such as addition and Boolean AND needed to carry out the instructions,
67,"This memory is made up of a number of registers, each having has a certain size and function",
68,"Usually, all the registers have the same size. Each register can hold one number, up to some maximum determined by its size. Registers can be read and written at high speed since they are internal to the CPU",
69,Registers,
70,a type of computer memory,
71,"quickly accept, store, and transfer data and instructions that are being used immediately by the CPU",
72,The registers used by the CPU are often termed as Processor registers.,
73,why we need the register ?,
74,needs processor registers for manipulating data,
75,a register for holding a memory address.,
76,The register holding the memory location is used to calculate the address of the next instruction after the execution of the current instruction is completed.,
77,Program Counter (PC),
78,which points to the next instruction to be fetched for execution,
79,"The name ‘‘program counter’’ is somewhat misleading because it has nothing to do with counting anything, but the term is universally used",
80,Instruction Register (IR),
81,which holds the instruction currently being executed,
82,Most computers have numerous other registers as well,
83,", some of them general purpose as well as some for specific purposes",
84,Yet other registers are used by the operating system to control the computer.,
85,"the register can be written (i.e., stored) into memory, if desired",
86,"The ALU itself performs addition, subtraction, and other simple operations on its inputs, thus yielding a result in the output register.",
87,Most instructions can be divided into one of two categories,
88,register-memory,
89,register-register,
90,Register-memory instructions allow memory words to be fetched into registers,
91,‘‘Words’’ are the units of data moved between memory and registers,
92,they can be used as ALU inputs in subsequent instructions.,
93,Other register-memory instructions allow registers to be stored back into memory,
94,A typical register-register instruction fetches two operands from the registers,
95,"brings them to the ALU input registers, performs some operation on them",
96,stores the result back in one of the registers,
97,(such as addition or Boolean AND),
98,e data path cycle,
99,The process of running two operands through the ALU and storing the result is called the data path cycle and is the heart of most CPUs,
100,"Modern computers have multiple ALUs operating in parallel and specialized for different functions. The faster the data path cycle is, the faster the machine runs",
101,The CPU executes each instruction in a series of small steps,
102,Fetch the next instruction from memory into the instruction register,
103,Change the program counter to point to the following instruction,
104,Determine the type of instruction just fetched,
105,"If the instruction uses a word in memory, determine where it is.",
106,"Fetch the word, if needed, into a CPU register.",
107,Execute the instruction.,
108,Go to step 1 to begin executing the following instruction.,
109,fetch-decode-execute,
110,": the program counter (PC), for keeping track of the address of the next instruction to be fetched",
111,"and the accumulator (AC), for accumulating arithmetic result",
112,Instructions are assumed to contain a single memory address.,
113,"It also has internal registers for holding the current instruction during its execution (instr), the type of the current instruction (instr type), the address of the instruction’s operand (data loc), and the current operand itself (data).",
114,"The memory location addressed contains the operand, for example, the data item to add to the accumulator",
115,"Instead, a program can be carried out by having another program fetch, examine, and execute its instructions",
116,The saving comes essentially from the fact that hardware is being replaced by software (the interpreter) and it costs more to replicate hardware than software.,
117,"the target machine has a large number of instructions and they are fairly complicated, with many options",
118,"An interpreter breaks the instructions of its target machine into small steps. As a consequence, the machine on which the interpreter runs can be much simpler and less expensive than a hardware processor for the target machine would be",
119,"Very early on, it was discovered that more complex instructions often led to faster program execution",
120,"Sometimes it was as simple as observing that the same two instructions often occurred consecutively, so a single instruction could accomplish the work of both",
121,A floating-point instruction is an example of a more complex instruction. Direct support for accessing array elements is another,
122,more complex instructions were better,
123,the execution of individual operations could sometimes be overlapped,
124,otherwise executed in parallel using different hardware.,
125,"Since accessing memory is relatively slow, many registers (at least 32) need to be provided",
126,"so that once a word is fetched, it can be kept in a register until it is no longer needed",
127,Running out of registers and having to flush them back to memory only to later reload them is undesirable and should be avoided as much as possible.,
128,The best way to accomplish this is to have enough registers.,
129,This observation means that only LOAD and STORE instructions should reference memor,
130,All other instructions should operate only on registers.,
132,Computer architects are constantly striving to improve performance of the machines they design,
133,Making the chips run faster by increasing their clock speed is one way,
134,limit,
135,parallelism,
136,as a way to get even more performance for a given clock speed.,
137,we see the history of the instruction set,
138,as before we have more instruction with complex function but,
139,we use the easy instruction,
140,instruction-level parallelism,
141,processor-level parallelism,
142,the actual fetching of instructions from memory is a major bottleneck in instruction execution speed,
143,fetch instructions from memory in advance, so they would be there when they were needed,
144,These instructions were stored in a special set of registers called the prefetch buffer.,
145,when an instruction was needed, it could usually be taken from the prefetch buffer rather than waiting for a memory read to complete,
146,prefetching divides instruction execution into two parts ,
147,fetching,
148,actual execution,
149,pipeline,
150,Instead of being divided into only two parts, instruction execution is often divided into many,